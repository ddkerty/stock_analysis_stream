# ÌïÑÏöîÌïú ÌååÏùº Íµ¨Ï°∞Ïóê ÎßûÏ∂∞ ÌîºÎ≥¥ÎÇòÏπò ÎêòÎèåÎ¶º Í∏∞Îä•ÏùÑ Îã®Í∏∞ Í∏∞Ïà† Î∂ÑÏÑùÏö© Î™®ÎìàÎ°ú Î∂ÑÎ¶¨ÌïòÍ≥†,
# app.pyÏóêÏÑú Ìò∏Ï∂úÌï† Ïàò ÏûàÎèÑÎ°ù Ï†ÑÏ≤¥ ÏΩîÎìúÎ•º Íµ¨ÏÑ±ÌïòÍ≤†ÏäµÎãàÎã§.

# 1. short_term_analysis.py (Ïã†Í∑ú Î™®Îìà ÏÉùÏÑ±Ïö© ÏΩîÎìú)
short_term_analysis_code = '''
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go

def download_price_data(ticker: str, period: str = "1mo", interval: str = "1d") -> pd.DataFrame:
    df = yf.download(ticker, period=period, interval=interval)
    df.dropna(inplace=True)
    return df

def calculate_fibonacci_retracement(df: pd.DataFrame):
    max_price = df["High"].max()
    min_price = df["Low"].min()
    diff = max_price - min_price
    levels = [0.0, 0.236, 0.382, 0.5, 0.618, 0.786, 1.0]
    retracement_levels = [max_price - diff * level for level in levels]
    return levels, retracement_levels

def plot_fibonacci_chart(df: pd.DataFrame):
    levels, retracements = calculate_fibonacci_retracement(df)
    fig = go.Figure()

    fig.add_trace(go.Candlestick(
        x=df.index,
        open=df["Open"],
        high=df["High"],
        low=df["Low"],
        close=df["Close"],
        name="Candle"
    ))

    for i, level in enumerate(levels):
        fig.add_hline(
            y=retracements[i],
            line_dash="dash",
            annotation_text=f"{int(level*100)}%",
            annotation_position="right"
        )

    fig.update_layout(title="Fibonacci Retracement Chart", height=600)
    return fig

def interpret_fibonacci(df, close_value=None):
    """ÌîºÎ≥¥ÎÇòÏπò Î†àÎ≤® Ìï¥ÏÑù"""
    if 'High' not in df.columns or 'Low' not in df.columns or df.empty:
        return "üìè ÌîºÎ≥¥ÎÇòÏπò Ìï¥ÏÑù Î∂àÍ∞Ä (Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±)"

    high_price = df['High'].max()
    low_price = df['Low'].min()
    diff = high_price - low_price

    if diff <= 0:
        return "üìè ÌîºÎ≥¥ÎÇòÏπò Ìï¥ÏÑù Î∂àÍ∞Ä (Í≥†Ï†ê=Ï†ÄÏ†ê)"

    fib_levels = {
        "0.236": high_price - 0.236 * diff,
        "0.382": high_price - 0.382 * diff,
        "0.5": high_price - 0.5 * diff,
        "0.618": high_price - 0.618 * diff,
    }

    close = close_value if close_value is not None else df['Close'].iloc[-1]
    closest_level, level_value = min(fib_levels.items(), key=lambda x: abs(close - x[1]))

    explanation = {
        "0.236": "ÏïΩÌïú ÎêòÎèåÎ¶º ‚Üí Í∞ïÌïú Ï∂îÏÑ∏ ÏßÄÏÜç Í∞ÄÎä•ÏÑ±",
        "0.382": "ÏùºÎ∞ò ÎêòÎèåÎ¶º ‚Üí Îã®Í∏∞ Ï†ÄÌï≠ Í∞ÄÎä•ÏÑ±",
        "0.5": "Ïã¨Î¶¨Ï†Å Ï§ëÍ∞ÑÏÑ† ‚Üí Î∞©Ìñ•ÏÑ± ÌÉêÏÉâ Íµ¨Í∞Ñ",
        "0.618": "Í∞ïÌïú ÎêòÎèåÎ¶º ‚Üí Î∞òÎì± ÎòêÎäî ÏßÄÏßÄ ÏãúÎèÑ Ï£ºÏãú"
    }.get(closest_level, "")

    return f"üìè **ÌòÑÏû¨Í∞Ä (${close:.2f})Îäî Fib {closest_level} (${level_value:.2f}) Í∑ºÏ≤ò** ‚Üí {explanation}"
'''

# 2. app.py ÏàòÏ†ïÏö© ÏÉòÌîå ÏΩîÎìú (Fibonacci ÌÉ≠ Ï∂îÍ∞Ä)
app_code = '''
import streamlit as st
from short_term_analysis import download_price_data, plot_fibonacci_chart

st.set_page_config(page_title="TechnutStock", layout="wide")

st.title("üìä TechnutStock - Îã®Í∏∞ Í∏∞Ïà† Î∂ÑÏÑù")

with st.sidebar:
    st.header("Îã®Í∏∞ Í∏∞Ïà† Î∂ÑÏÑù ÏÑ§Ï†ï")
    ticker = st.text_input("Ï¢ÖÎ™© Ìã∞Ïª§ ÏûÖÎ†•", value="AAPL")
    period = st.selectbox("Ï°∞Ìöå Í∏∞Í∞Ñ", ["5d", "1mo", "3mo"], index=1)
    interval = st.selectbox("Ïù∏ÌÑ∞Î≤å", ["1m", "5m", "15m", "1d"], index=3)

tab1, tab2 = st.tabs(["üìà ÌîºÎ≥¥ÎÇòÏπò ÎêòÎèåÎ¶º", "üõ† Ìñ•ÌõÑ Ï∂îÍ∞Ä Í∏∞Îä•"])

with tab1:
    st.subheader("üìâ Fibonacci Retracement Ï∞®Ìä∏")
    if st.button("Ï∞®Ìä∏ Î∂ÑÏÑù Ïã§Ìñâ"):
        df = download_price_data(ticker, period=period, interval=interval)
        if df is not None and not df.empty:
            fig = plot_fibonacci_chart(df)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
with tab2:
    st.info("VWAP, Bollinger Bands Îì±Ïùò Ï∂îÍ∞Ä Í∏∞Ïà† ÏßÄÌëú Î∂ÑÏÑù Í∏∞Îä•ÏùÄ Ï∂îÌõÑ ÏóÖÎç∞Ïù¥Ìä∏ ÏòàÏ†ïÏûÖÎãàÎã§.")
'''

# Ï†ÄÏû•
from pathlib import Path

Path("/mnt/data/short_term_analysis.py").write_text(short_term_analysis_code, encoding='utf-8')
Path("/mnt/data/app_fibonacci.py").write_text(app_code, encoding='utf-8')
